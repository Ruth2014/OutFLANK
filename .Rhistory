# if(dim(HetCounts)[2]==1){
# 	return (list(He=NA,FST=NA, T1=NA, T2=NA,FSTNoCorr=NA, T1NoCorr=NA, T2NoCorr=NA,meanAlleleFreq = NA))
# }
# if(dim(HetCounts)[2]==2){
# 		if(paste(colnames(HetCounts),collapse="")=="01"){HetCounts=cbind(HetCounts,"2"=0)}
# 		if(paste(colnames(HetCounts),collapse="")=="12"){HetCounts=cbind("0"=0,HetCounts)}
# 		if(paste(colnames(HetCounts),collapse="")=="02"){HetCounts=cbind(HetCounts[,1],"1"=0, HetCounts[,2])}
# 	}
# out = WC_FST_Diploids_2Alleles(HetCount)
return(HetCounts)
}
getFSTs_diploids(popNamesTemp,tempdata[,1])
getFSTs_diploids = function(popNameList, SNPDataColumn){  #i is the locus (row) number
#eliminating the missing data for this locus
popnames=unlist(popNameList)
popNameTemp=popnames[which(SNPDataColumn!=9)]
snpDataTemp=SNPDataColumn[SNPDataColumn!=9]
HetCounts <- tapply(snpDataTemp, list(popNameTemp,snpDataTemp), length)
HetCounts[is.na(HetCounts)] = 0
#Case: all individuals are genetically identical at this locus
if(dim(HetCounts)[2]==1){
return (list(He=NA,FST=NA, T1=NA, T2=NA,FSTNoCorr=NA, T1NoCorr=NA, T2NoCorr=NA,meanAlleleFreq = NA))
}
if(dim(HetCounts)[2]==2){
if(paste(colnames(HetCounts),collapse="")=="01"){HetCounts=cbind(HetCounts,"2"=0)}
if(paste(colnames(HetCounts),collapse="")=="12"){HetCounts=cbind("0"=0,HetCounts)}
if(paste(colnames(HetCounts),collapse="")=="02"){HetCounts=cbind(HetCounts[,1],"1"=0, HetCounts[,2])}
}
out = WC_FST_Diploids_2Alleles(HetCounts)
return(out)
}
getFSTs_diploids(popNamesTemp,tempdata[,1])
HetCounts
WC_FST_FiniteSample_Diploids_2Alleles_NoCorr(HetCounts)
WC_FST_FiniteSample_Diploids_2Alleles(HetCounts)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(snpmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=getFST_diploids(popname,SNPmat[i,])
if (i==10000){print(paste(i, "done of", nloci))
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
}
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(snpmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=getFST_diploids(popname,SNPmat[i,])
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=getFST_diploids(popname,SNPmat[i,])
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=getFSTs_diploids(popname,SNPmat[i,])
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
return SNPMat[1,]
for (i in 1:nloci){
FSTmat[i,]=getFSTs_diploids(popname,SNPmat[i,])
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
return SNPmat[1,]
# for (i in 1:nloci){
# 	   FSTmat[i,]=getFSTs_diploids(popname,SNPmat[i,])
# 	   if (i==10000){print(paste(i, "done of", nloci))}
# }
# outTemp=as.data.frame(FSTmat2)
# return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
return (SNPmat[1,])
# for (i in 1:nloci){
# 	   FSTmat[i,]=getFSTs_diploids(popname,SNPmat[i,])
# 	   if (i==10000){print(paste(i, "done of", nloci))}
# }
# outTemp=as.data.frame(FSTmat2)
# return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
return (SNPmat[,1])
# for (i in 1:nloci){
# 	   FSTmat[i,]=getFSTs_diploids(popname,SNPmat[,i])
# 	   if (i==10000){print(paste(i, "done of", nloci))}
# }
# outTemp=as.data.frame(FSTmat2)
# return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat2 <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=getFSTs_diploids(popname,SNPmat[,i])
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=getFSTs_diploids(popname,SNPmat[,i])
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i]=getFSTs_diploids(popname,SNPmat[,i])
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=unlist(getFSTs_diploids(popname,SNPmat[,i]))
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=unlist(getFSTs_diploids(popname,SNPmat[,i]))
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat2)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=unlist(getFSTs_diploids(popname,SNPmat[,i]))
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat)
return (cbind(locusname,outTemp))
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=unlist(getFSTs_diploids(popname,SNPmat[,i]))
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat)
outTemp = cbind(locusname,outTemp)
colnames(outTemp)= c(LocusName,He, FST, T1, T2, FSTNoCorr,T1NoCorr,T2NoCorr,meanAlleleFreq)
return (outTemp)
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat = function(SNPmat,locusNames,popNames){
# SNPmat is a matrix with individuals in rows and snps in columns
# 0, 1, or 2 represent the number of copies of the focal allele, and 9 is for missing data
# locusNames is a character vector of names of each SNP
# popNames is a character vector with the population identifier for each individual
locusname <- unlist(locusNames)
popname <- unlist(popNames)
### Check that SNPmat has appropriate values (0, 1, 2, or 9, only)
snplevs <- levels(as.factor(unlist(SNPmat)))
ls <- paste(snplevs, collapse="")
if(ls!="012" & ls!="0129"){print("Error: Your snp matrix does not have 0,1, and 2"); break}
### Checking that locusNames and popNames have the same lengths as the columns and rows of SNPmat
if(dim(SNPmat)[1]!=length(popname) ){
print("Error: your population names do not match your SNP matrix")
break}
if(dim(SNPmat)[2]!=length(locusname)){
print("Error:  your locus names do not match your SNP matrix")
break}
writeLines("Calculating FSTs, may take a few minutes...")
nloci <- length(locusname)
FSTmat <- matrix(NA, nrow=nloci, ncol=8)
for (i in 1:nloci){
FSTmat[i,]=unlist(getFSTs_diploids(popname,SNPmat[,i]))
if (i==10000){print(paste(i, "done of", nloci))}
}
outTemp=as.data.frame(FSTmat)
outTemp = cbind(locusname,outTemp)
colnames(outTemp)= c("LocusName","He", "FST", "T1", "T2", "FSTNoCorr", "T1NoCorr", "T2NoCorr", "meanAlleleFreq")
return (outTemp)
}
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat(tempdata3,locusNamesTemp,popNamesTemp)
tempdata3[[1,4]]=9
MakeDiploidFSTMat(tempdata3,locusNamesTemp,popNamesTemp)
tempdata3
tempdata2
MakeDiploidFSTMat(tempdata,locusNamesTemp,popNamesTemp)
MakeDiploidFSTMat(tempdata2,locusNamesTemp,popNamesTemp)
