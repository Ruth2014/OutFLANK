#
# 0   0.001   0.005    0.01     0.1
# False 1068464     340      57      14       9
# True      342    4082    3369    2250    1196
### 1R
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120)
# False discovery rate =  0.00989826780313445
# Power =  0.481739130434783
#
# 0  0.001  0.005   0.01    0.1
# False 978821   1827   1778    232     37
# True      36      0    836   1594   1171
### 2R
multirunsMetalist(df22R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120)
annotations = read.table("~/Desktop/HGDP data/annotated_illumina_snps_128_wfst.gff",sep="\t",header=FALSE)
annotationstemp=annotations
annotations=annotationstemp[,c(1,9)]
codingNSlist=grep("coding-nonsynonymous",annotations[,2])
codingSlist=grep("coding-synonymous",annotations[,2])
codingIntronlist=grep("intron",annotations[,2])
codingmrnautrlist=grep("mrna-utr",annotations[,2])
#Should also add for other types like mrna-utr
SNPtype=vector(mode="character",length=length(annotationstemp[,1]))
SNPtype[codingNSlist]="coding-nonsynonymous"
SNPtype[codingSlist]="coding-synonymous"
SNPtype[codingIntronlist]="intron"
SNPtype[codingmrnautrlist]="mrna-utr"
tempSNPlist1=unlist(strsplit(as.vector(annotations[,2]),"rs"))
tempSNPlist1=tempSNPlist1[seq(from=2,to=length(tempSNPlist1), by=2)]
tempSNPlist2=paste("rs",tempSNPlist1,sep="")
tempSNPlist1=substr(tempSNPlist2,start=1,stop = 10)
tempSNPlist3=ifelse(substr(tempSNPlist1,start=10,stop=10)==" ", substr(tempSNPlist1,start=1,stop=9),tempSNPlist1)
annotationBySNP=cbind(chr=annotations[,1],SNPname=tempSNPlist3,SNPtype)
annotationBySNPDF=as.data.frame(annotationBySNP)
chrDFMaker = function(chr,DeleteNonGenic = TRUE){
}
chrDFMaker = function(chr,DeleteNonGenic = TRUE){
data=read.table(paste("~/Desktop/HGDP data/chr",chr,".popfreqs.ancfrq.strat",sep=""),sep="\t",header=FALSE)
names(data)=c("chrNum","SNPname","pop","bp1","bp2","freq","allele2count","totalAlleles")
writeLines("Data has been read")
varlist=tapply(data$freq,data$SNPname,var)
meanfreqlist=tapply(data$freq,data$SNPname,mean)
Helist= 2*meanfreqlist*(1-meanfreqlist)
LocusNametemp1=names(table(data$SNPname))
LocusNametemp=as.data.frame(LocusNametemp1)
names(LocusNametemp)=c("LocusName")
LocusNametemp2=as.character(LocusNametemp1)
FSTNoCorrlist=varlist/(meanfreqlist*(1-meanfreqlist))
T1NoCorrlist=varlist
T2NoCorrlist=(meanfreqlist*(1-meanfreqlist))
matchesToAnnotation=match(LocusNametemp2,annotationBySNPDF$SNPname)
SNPtype=annotationBySNPDF$SNPtype[matchesToAnnotation]
out=cbind(LocusName=LocusNametemp,He=Helist,FSTNoCorr=FSTNoCorrlist,T1NoCorr=T1NoCorrlist,T2NoCorr=T2NoCorrlist,FST=FSTNoCorrlist,T1=T1NoCorrlist,T2=T2NoCorrlist,SNPtype=SNPtype)
outHeScreened=out[which(out$He>0.1),]
if(DeleteNonGenic) out=out[which(SNPtype!=""),]
out
}
OFonHGDP= function(chr,qthreshold=0.05){
data=read.table(paste("~/Desktop/HGDP data/chr",chr,".popfreqs.ancfrq.strat",sep=""),sep="\t",header=FALSE)
names(data)=c("chrNum","SNPname","pop","bp1","bp2","freq","allele2count","totalAlleles")
writeLines("Data has been read")
varlist=tapply(data$freq,data$SNPname,var)
meanfreqlist=tapply(data$freq,data$SNPname,mean)
Helist= 2*meanfreqlist*(1-meanfreqlist)
LocusNametemp=names(table(data$SNPname))
LocusNametemp=as.data.frame(LocusNametemp)
FSTNoCorrlist=varlist/(meanfreqlist*(1-meanfreqlist))
T1NoCorrlist=varlist
T2NoCorrlist=(meanfreqlist*(1-meanfreqlist))
out=cbind(LocusName=LocusNametemp,He=Helist,FSTNoCorr=FSTNoCorrlist,T1NoCorr=T1NoCorrlist,T2NoCorr=T2NoCorrlist,FST=FSTNoCorrlist,T1=T1NoCorrlist,T2=T2NoCorrlist)
#out=as.data.frame(out)
outHeScreened=out[which(out$He>0.1),]
writeLines("Doing OutFLANK")
OutFLANK(outHeScreened, NumberOfSamples=20)
}
allGeneData=chrDFMaker(1)
for(chrnum in 2:23) rbind(allGeneData,chrDFMaker(chrnum))
write.table(allGeneData, file ="~/Desktop/HGDP data/allGeneData.txt" )
allHGDPOF=OutFLANK(allGeneData,NumberOfSamples=20)
summary(allHGDPOF$results)
hist(allHGDPOF$results$pvaluesRightTail)
hist(allHGDPOF$results$pvaluesRightTail,breask=100)
hist(allHGDPOF$results$pvaluesRightTail,breaks=100)
hist(allHGDPOF$results$pvaluesRightTail,breaks=500)
hist(allHGDPOF$results$pvaluesRightTail,breaks=1000)
head(annotations)
head(codingNSlist)
tempSNPlist1=unlist(strsplit(as.vector(annotations[,2]),"rs"))
head(tempSNPlist1)
tempSNPlist1=tempSNPlist1[seq(from=2,to=length(tempSNPlist1), by=2)]
head(tempSNPlist1)
tempSNPlist2=paste("rs",tempSNPlist1,sep="")
head(tempSNPlist2)
tempSNPlist1=substr(tempSNPlist2,start=1,stop = 10)
head(tempSNPlist1)
tempSNPlist3=ifelse(substr(tempSNPlist1,start=10,stop=10)==" ", substr(tempSNPlist1,start=1,stop=9),tempSNPlist1)
head(tempSNPlist3)
length(tempSNPlist3)
length(tempSNPlist1)
length(annotations)
length(annotations[1])
length(annotations[,1])
head(annotationsBySNP)
head(annotationsBySNP)
head(annotationBySNP)
table[annotationBySNP[,3]]
head[annotationBySNP[,3]]
annotationBySNP[1]
annotationBySNP[3]
annotationBySNP[[3]
]
annotationBySNP[[1]]
annotationBySNP[1,]
annotationBySNP[1,][[3]]
annotationBySNP[3,][[3]]
annotationBySNP[4,][[3]]
head[annotationBySNP[,][[3]]]
dim[annotationBySNP
]
class[annotationBySNP]
temp=as.vector[annotationBySNP]
head(SNPtype)
SNPtype[4]
tempSNPlist1[4]
class(SNPtype)
class(tempSNPlist1)
class(annotations[,1])
annotationBySNP=cbind(chr=as.character[annotations[,1]],SNPname=tempSNPlist3,SNPtype)
annotationBySNP=cbind(chr=as.character[unlist[annotations[,1]]],SNPname=tempSNPlist3,SNPtype)
head(annotations)
dim(annotations)
temp=unlist[annotations]
is.factor(annotaitons)
is.factor(annotations)
annotationBySNP=cbind(SNPname=tempSNPlist3,SNPtype)
annotationBySNPDF=as.data.frame(annotationBySNP)
head(annotationBySNP)
head[annotationBySNPDF$SNPname]
head[annotationBySNP$SNPname]
head[annotationBySNP[,1]]
head(annotationBySNP[,1])
head(annotationBySNPDF$SNPname)
chr8=read.table("~/Desktop/HGDP data/chr8.popfreqs.ancfrq.strat",sep="\t",header=FALSE)
names(chr8)=c("chrNum","SNPname","pop","bp1","bp2","freq","allele2count","totalAlleles")
varlist=tapply(chr8$freq,chr8$SNPname,var)
meanfreqlist=tapply(chr8$freq,chr8$SNPname,mean)
Helist= 2*meanfreqlist*(1-meanfreqlist)
LocusNametemp=names(table(chr8$SNPname))
LocusNametemp=as.data.frame(LocusNametemp)
FSTNoCorrlist=varlist/(meanfreqlist*(1-meanfreqlist))
T1NoCorrlist=varlist
T2NoCorrlist=(meanfreqlist*(1-meanfreqlist))
out=cbind(LocusName=LocusNametemp,He=Helist,FSTNoCorr=FSTNoCorrlist,T1NoCorr=T1NoCorrlist,T2NoCorr=T2NoCorrlist,FST=FSTNoCorrlist,T1=T1NoCorrlist,T2=T2NoCorrlist)
outHeScreened=out[which(out$He>0.1),]
temp41=match(chr8$SNPname,annotationBySNPDF$SNPname)
head(temp41)
head(chr$SNPname)
temp41=match(chr8$LocusName,annotationBySNPDF$SNPname)
head(temp41)
temp41=match(chr8$LocusName,annotationBySNP[,1])
head(temp41)
head9chr8$LocusName
head(chr8$LocusName)
head(out$LocusName)
temp41=match(out$LocusName,annotationBySNPDF$SNPname)
head(temp41)
head(temp41,100)
temp42=out(match(out$LocusName,annotationBySNPDF$SNPname))
temp42=out[match(out$LocusName,annotationBySNPDF$SNPname)]
temp42=out[match(out$LocusName,annotationBySNPDF$SNPname),]
head(temp42)
summary(temp42)
summary(out)
temp41[1]
out[332086]
out[332086,]
out[1,]
temp42=out[match(annotationBySNPDF$SNPname,out$LocusName),]
head(temp42)
out[1]
out[1,]
length(out[1,])
length(out[,1])
length(temp41)
temp41[1]
temp41=match(annotationBySNPDF$SNPname,out$LocusName)
length(temp41)
head(temp41,100)
head(temp41,1000)
summary(temp41)
temp43=annotationBySNPDF[temp41]
temp43=annotationBySNPDF$SNPtype[temp41]
head(temp43)
summary(temp43)
allGeneData=chrDFMaker(1)
for(chrnum in 2:23) rbind(allGeneData,chrDFMaker(chrnum))
write.table(allGeneData, file ="~/Desktop/HGDP data/allGeneData.txt" )
allHGDPOF=OutFLANK(allGeneData,NumberOfSamples=20)
summary(allHGDPOF)
summary(allHGDPOF$resutls)
summary(allHGDPOF$results)
hist(allHGDPOF$results$pvaluesRightTail)
hist(allHGDPOF$results$pvaluesRightTail,breaks=200)
hist(allHGDPOF$results$pvaluesRightTail,breaks=500)
allGeneData=chrDFMaker(1, DeleteIntrons=TRUE)
chrDFMaker = function(chr,DeleteNonGenic = TRUE,DeleteIntrons=FALSE){
data=read.table(paste("~/Desktop/HGDP data/chr",chr,".popfreqs.ancfrq.strat",sep=""),sep="\t",header=FALSE)
names(data)=c("chrNum","SNPname","pop","bp1","bp2","freq","allele2count","totalAlleles")
writeLines("Data has been read")
varlist=tapply(data$freq,data$SNPname,var)
meanfreqlist=tapply(data$freq,data$SNPname,mean)
Helist= 2*meanfreqlist*(1-meanfreqlist)
LocusNametemp1=names(table(data$SNPname))
LocusNametemp=as.data.frame(LocusNametemp1)
names(LocusNametemp)=c("LocusName")
LocusNametemp2=as.character(LocusNametemp1)
FSTNoCorrlist=varlist/(meanfreqlist*(1-meanfreqlist))
T1NoCorrlist=varlist
T2NoCorrlist=(meanfreqlist*(1-meanfreqlist))
matchesToAnnotation=match(LocusNametemp2,annotationBySNPDF$SNPname)
SNPtype=annotationBySNPDF$SNPtype[matchesToAnnotation]
out=cbind(LocusName=LocusNametemp,He=Helist,FSTNoCorr=FSTNoCorrlist,T1NoCorr=T1NoCorrlist,T2NoCorr=T2NoCorrlist,FST=FSTNoCorrlist,T1=T1NoCorrlist,T2=T2NoCorrlist,SNPtype=SNPtype)
outHeScreened=out[which(out$He>0.1),]
if(DeleteNonGenic) out=out[which(SNPtype!=""),]
out
}
allGeneData=chrDFMaker(1, DeleteIntrons=TRUE)
allGeneDataNoIntrons=chrDFMaker(1, DeleteIntrons=TRUE)
for(chrnum in 2:23) rbind(allGeneDataNoIntrons,chrDFMaker(chrnum, DeleteIntrons=TRUE))
write.table(allGeneDataNoIntrons, file ="~/Desktop/HGDP data/allGeneDataNoIntrons.txt" )
allHGDPOFNoIntrons=OutFLANK(allGeneDataNoIntrons,NumberOfSamples=20)
write.table(allGeneDataNoIntrons, file ="~/Desktop/HGDP data/allGeneDataNoIntrons.txt" )
allHGDPOFNoIntrons=OutFLANK(allGeneDataNoIntrons,NumberOfSamples=20)
summary(allHGDPOFNoIntrons$results)
hist(allHGDPOFNoIntrons$results$pvaluesRightTail,breaks=500)
chrDFMaker = function(chr,DeleteNonGenic = TRUE,DeleteIntrons=FALSE){
data=read.table(paste("~/Desktop/HGDP data/chr",chr,".popfreqs.ancfrq.strat",sep=""),sep="\t",header=FALSE)
names(data)=c("chrNum","SNPname","pop","bp1","bp2","freq","allele2count","totalAlleles")
writeLines("Data has been read")
varlist=tapply(data$freq,data$SNPname,var)
meanfreqlist=tapply(data$freq,data$SNPname,mean)
Helist= 2*meanfreqlist*(1-meanfreqlist)
LocusNametemp1=names(table(data$SNPname))
LocusNametemp=as.data.frame(LocusNametemp1)
names(LocusNametemp)=c("LocusName")
LocusNametemp2=as.character(LocusNametemp1)
FSTNoCorrlist=varlist/(meanfreqlist*(1-meanfreqlist))
T1NoCorrlist=varlist
T2NoCorrlist=(meanfreqlist*(1-meanfreqlist))
matchesToAnnotation=match(LocusNametemp2,annotationBySNPDF$SNPname)
SNPtype=annotationBySNPDF$SNPtype[matchesToAnnotation]
out=cbind(LocusName=LocusNametemp,He=Helist,FSTNoCorr=FSTNoCorrlist,T1NoCorr=T1NoCorrlist,T2NoCorr=T2NoCorrlist,FST=FSTNoCorrlist,T1=T1NoCorrlist,T2=T2NoCorrlist,SNPtype=SNPtype)
outHeScreened=out[which(out$He>0.1),]
if(DeleteNonGenic) out=out[which(SNPtype!=""),]
if(DeleteIntrons) out=out[which(SNPtype!="intron"),]
out
}
allGeneDataNoIntrons=chrDFMaker(1, DeleteIntrons=TRUE)
for(chrnum in 2:23) rbind(allGeneDataNoIntrons,chrDFMaker(chrnum, DeleteIntrons=TRUE))
write.table(allGeneDataNoIntrons, file ="~/Desktop/HGDP data/allGeneDataNoIntrons.txt" )
allHGDPOFNoIntrons=OutFLANK(allGeneDataNoIntrons,NumberOfSamples=20)
summary(allHGDPOFNoIntrons$results)
hist(allHGDPOFNoIntrons$results$pvaluesRightTail,breaks=500)
multirunsMetalist(df22R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120,qthreshold=0.01)
multirunsMetalist(df2IM, NumNeut = 9900, NumSel = 100, NumPops = 75, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120,qthreshold=0.01)
multirunsMetalist(df2IM, NumNeut = 9900, NumSel = 100, NumPops = 74, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120,qthreshold=0.01)
multirunsMetalist(df2IBD, NumNeut = 9900, NumSel = 100, NumPops = 74, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120,qthreshold=0.01)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 74, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120,qthreshold=0.01)
multirunsMetalist(df22R, NumNeut = 9900, NumSel = 100, NumPops = 74, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 120,qthreshold=0.01)
falsepos=read.csv("/Users/whitlock/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures")
falsepos=read.csv("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures")
falsepos=read.csv("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures", header=TRUE,stringsAsFactors=FALSE)
falsepos=read.table("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures", header=TRUE,stringsAsFactors=FALSE)
falsepos=read.csv("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures/comparative false positive.csv", header=TRUE,stringsAsFactors=FALSE)
falsepos=read.csv("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures/comparative false positive.csv", header=TRUE,stringsAsFactors=FALSE)
falsepos=read.csv("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures/comparative false positive.csv", header=TRUE,stringsAsFactors=FALSE)
falsepos
falsepos=as.data.frame(falsepos)
falsepos
ylab = "Island Model")
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "Island Model")
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "Island Model",las = 1, col = "firebrick", ylim = c(0,0.0025))
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.0025), text = "Island model")
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.0025), axes=T)
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.0025), axes=T)
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.0025), axes=TRUE)
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.0025), axes=TRUE,width=.5)
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.0025), axes=TRUE,width=.25)
barplot(falsepos$IBD, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.0025), axes=TRUE,width=.25)
barplot(falsepos$IBD, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.016), axes=TRUE,width=.25)
barplot(falsepos$IM, names.arg = falsepos$Method, ylab = "False positive rate",las = 1, col = "firebrick", ylim = c(0,0.016), axes=TRUE,width=.25)
barplot(as.matrix(falsepos), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD)), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$1R,falsepos$2R)), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$1R,falsepos$2R)), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$1R)), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$1R)), beside = TRUE)
falsepos
barplot(as.matrix(cbind(falsepos$IM,falsepo$IBD,falsepos$X1R)), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R)), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.1, 0.3))
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.1, 0.5))
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.01, 0.5))
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.5))
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8))
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8),xlab = "Method", ylab = "False positive rate")
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8),xlab = "Method", ylab = "False positive rate", las=1,legend.text = falsepos$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8),xlab = "Method",
ylab = "False positive rate", las=1,legend.text = "Island model     IBD     One refuge expansion     Two refuge expansion")
ylab = "False positive rate", las=1,legend.text = falsepos$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8),xlab = "Island model     IBD     One refuge expansion     Two refuge expansion",
)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8),xlab = "Island model     IBD     One refuge expansion     Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = falsepos$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8),xlab = "Island model               IBD         One refuge expansion               Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = falsepos$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), beside = TRUE,space = c(0.005, 0.8),xlab = "Island model                     IBD                         One refuge expansion                         Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = falsepos$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), col = c("darkgreen","goldenrod1"),beside = TRUE,space = c(0.005, 0.8),xlab = "Island model                     IBD                         One refuge expansion                         Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = falsepos$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), col = c("darkolivegreen","goldenrod1","darkkhaki","darkorchid"),beside = TRUE,space = c(0.005, 0.8),xlab = "Island model                     IBD                         One refuge expansion                         Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = falsepos$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), col = c("darkolivegreen","goldenrod1","darkkhaki","darkorchid4"),beside = TRUE,space = c(0.005, 0.8),xlab = "Island model                     IBD                         One refuge expansion                         Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = falsepos$Method)
power=read.csv("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures/comparative power.csv", header=TRUE,stringsAsFactors=FALSE)
power=as.data.frame(power)
power=read.csv("~/Desktop/ Get to Work!/Papers/Papers in progress/Trimming - OutFLANK/figures/comparative power.csv", header=TRUE,stringsAsFactors=FALSE)
power=as.data.frame(power)
power
barplot(as.matrix(cbind(power$IM,power$IBD,power$X1R,power$X2R)), col = c("darkolivegreen","goldenrod1","darkkhaki","darkorchid4"),beside = TRUE,space = c(0.005, 0.8),xlab = "Island model                     IBD                         One refuge expansion                         Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = power$Method)
barplot(as.matrix(cbind(power$IM,power$IBD,power$X1R,power$X2R)), col = c("darkolivegreen","goldenrod1","darkkhaki","darkorchid4"),beside = TRUE,space = c(0.005, 0.8),xlab = "Island model                     IBD                         One refuge expansion                         Two refuge expansion",  ylab = "Power", las=1,legend.text = power$Method)
barplot(as.matrix(cbind(falsepos$IM,falsepos$IBD,falsepos$X1R,falsepos$X2R)), col = c("darkolivegreen","goldenrod1","darkkhaki","darkorchid4"),beside = TRUE,space = c(0.005, 0.8),xlab = "Island model                     IBD                         One refuge expansion                         Two refuge expansion",  ylab = "False positive rate", las=1,legend.text = falsepos$Method)
hist(allHGDPOFNoIntrons$results$pvaluesRightTail,breaks=500)
summary(allHGDPOFNoIntrons$results)
temp=qvalue(allHGDPOFNoIntrons$results$pvaluesRightTail,fdr.level=qthreshold,pi0.method="smoother")
temp123=allHGDPOFNoIntrons$results$pvaluesRightTail[!is.na(allHGDPOFNoIntrons$results$pvaluesRightTail)]
temp=qvalue(temp123,fdr.level=qthreshold,pi0.method="smoother")
temp=qvalue(temp123,fdr.level=.05,pi0.method="smoother")
summary(temp)
tempb=qvalue(temp123,fdr.level=.05,pi0.method="bootstrap")
summary(tempb)
min(temp123)
allGeneDataNoIntrons=chrDFMaker(1, DeleteIntrons=TRUE)
for(chrnum in 2:23) rbind(allGeneDataNoIntrons,chrDFMaker(chrnum, DeleteIntrons=TRUE))
summary(allGeneDataNoIntrons)
length(allGeneDataNoIntrons[,1])
temp=allGeneDataNoIntrons[which(allGeneDataNoIntrons$SNPtype!="intron"),]
length(temp[,1])
allHGDPOFNoIntrons=OutFLANK(temp,NumberOfSamples=20)
summary(allHGDPOFNoIntrons$results)
.05/703
hist(allHGDPOFNoIntrons$results$pvaluesRightTail,breaks=500)
hist(allHGDPOFNoIntrons$results$pvaluesRightTail,breaks=100)
summary(annotationsBySNP)
summary(annotationsBySNPDF)
annotations = read.table("~/Desktop/HGDP data/annotated_illumina_snps_128_wfst.gff",sep="\t",header=FALSE)
annotationstemp=annotations
annotations=annotationstemp[,c(1,9)]
codingNSlist=grep("coding-nonsynonymous",annotations[,2])
codingSlist=grep("coding-synonymous",annotations[,2])
codingIntronlist=grep("intron",annotations[,2])
codingmrnautrlist=grep("mrna-utr",annotations[,2])
#Should also add for other types like mrna-utr
SNPtype=vector(mode="character",length=length(annotationstemp[,1]))
SNPtype[codingNSlist]="coding-nonsynonymous"
SNPtype[codingSlist]="coding-synonymous"
SNPtype[codingIntronlist]="intron"
SNPtype[codingmrnautrlist]="mrna-utr"
#####turning annoted list notes into SNP names
tempSNPlist1=unlist(strsplit(as.vector(annotations[,2]),"rs"))
tempSNPlist1=tempSNPlist1[seq(from=2,to=length(tempSNPlist1), by=2)]
tempSNPlist2=paste("rs",tempSNPlist1,sep="")
tempSNPlist1=substr(tempSNPlist2,start=1,stop = 10)
tempSNPlist3=ifelse(substr(tempSNPlist1,start=10,stop=10)==" ", substr(tempSNPlist1,start=1,stop=9),tempSNPlist1)
annotationBySNP=cbind(SNPname=tempSNPlist3,SNPtype)
annotationBySNPDF=as.data.frame(annotationBySNP)
summary(annotationsBySNPDF)
summary(annotationBySNPDF)
summary(out1R)
hist(out1R$results$FSTNoCorr)
hist(out1R$results$FSTNoCorr,breaks=100)
hist(out1R$results$FSTNoCorr,breaks=100,xlim=c(0,.4))
hist(outIM$results$FSTNoCorr,breaks=100,xlim=c(0,.4))
OutFLANKResultPlotter(outIM)
OutFLANKResultsPlotter(outIM)
OutFLANKResultsPlotter(outIM,xlim=c(0,.4))
OutFLANKResultsPlotter(outIM,Zoom=True)
OutFLANKResultsPlotter(outIM,Zoom=T)
summary(outIM$results[which(outIM$results$OutlierFlag),])
summary(out1R$results[which(out1R$results$OutlierFlag),])
OutFLANKResultsPlotter(out1R,Zoom=T)
quantile(outIM$results$FSTNoCorr,c(.05,.95))
quantile(outIM$results$FSTNoCorr,c(.05,.95),na.rm=TRUE)
OutFLANKResultsPlotter(outIM,NoCorr=F)
hist(outIM$results$FST)
hist(outIM$results$FST,binwidth=0.005)
hist(outIM$results$FST,breaks=100)
hist(outIM$results$FST,breaks=100,col="darkgoldenrod1")
summary(out1R$results)
document("~/Desktop/OutFLANK")
summary(allHGDPOFNoIntrons$results)
length(which(allHGDPOFNoIntrons$results$pvaluesRightTail<0.01)
)
length(which(allHGDPOFNoIntrons$results$pvaluesRightTail<0.01))
length(which(allHGDPOFNoIntrons$results$pvaluesRightTail<1))
4/703
hist(allHGDPOFNoIntrons$results$pvaluesRightTail,breaks=100)
hist(allHGDPOFNo$results$pvaluesRightTail,breaks=100)
hist(allHGDPOF$results$pvaluesRightTail,breaks=100)
length(which(allHGDPOF$results$pvaluesRightTail<1))
length(which(allHGDPOF$results$pvaluesRightTail<0.01))
177/18366
length(which(allHGDPOF$results$pvaluesRightTail<0.001))
28/18366
length(which(allHGDPOF$results$pvaluesRightTail<0.0001))
4/18366
citation)qvalue
citation(qvalue)
citation("qvalue")
lion <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter17/chap17e1LionNoses.csv"))
head(lion)
plot(ageInYears ~ proportionBlack, data = lion)
lionRegression <- lm(ageInYears ~ proportionBlack, data = lion)
summary(lionRegression)
abline(lionRegression)
multiRunsIM(dfIMm009405,minLoci=100000,NumNeut=9900,NumSel=100,NumPops=20,NumSampledIndsPerPop=30,qthreshold=0.05,LeftTrimFraction=.05,NoCorr=TRUE)
multiRunsIM(dfIMm009405,minLoci=100000,NumNeut=9900,NumSel=100,NumPops=20,NumSampledIndsPerPop=100,qthreshold=0.05,LeftTrimFraction=.05,NoCorr=TRUE)
multiRunsIM(dfIMm009405,minLoci=100000,NumNeut=9900,NumSel=100,NumPops=20,NumSampledIndsPerPop=50,qthreshold=0.05,LeftTrimFraction=.05,NoCorr=TRUE)
#### n = 5
multiRunsIM(dfIMm009405,minLoci=100000,NumNeut=9900,NumSel=100,NumPops=20,NumSampledIndsPerPop=5,qthreshold=0.05,LeftTrimFraction=.05,NoCorr=TRUE)
#### n = 10
multiRunsIM(dfIMm009405,minLoci=100000,NumNeut=9900,NumSel=100,NumPops=20,NumSampledIndsPerPop=10,qthreshold=0.05,LeftTrimFraction=.05,NoCorr=TRUE)
#### n = 15
multiRunsIM(dfIMm009405,minLoci=100000,NumNeut=9900,NumSel=100,NumPops=20,NumSampledIndsPerPop=15,qthreshold=0.05,LeftTrimFraction=.05,NoCorr=TRUE)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 5, envCorrCutoff = 0.4,numreps = 120)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 5, envCorrCutoff = 0.4,numreps = 12)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 10, envCorrCutoff = 0.4,numreps = 12)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 15, envCorrCutoff = 0.4,numreps = 12)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 50, envCorrCutoff = 0.4,numreps = 12)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 100, envCorrCutoff = 0.4,numreps = 12)
multirunsMetalist=function(metalist, NumNeut, NumSel, NumPops, Use18=FALSE, NumSampledIndsPerPop=20, NoCorr=TRUE,envCorrCutoff=0, qthreshold=0.05, numreps, RightTrimFraction=0.05){
#Setting up the output array - -to count positive and negative resutls for each s value.
outlist=array(rep(0,10))
dim(outlist)=c(2,5)
colnames(outlist)=c("0","0.001","0.005","0.01","0.1")
rownames(outlist)=c("False","True")
for(i in 1:numreps) {
data=metalistHarvesterMike(metalist, NumNeut, NumSel, NumPops, Use18, NumSampledIndsPerPop, NoCorr=T)
output=OutFLANK(data, LeftTrimFraction=0.05, RightTrimFraction, Hmin=0.1, 20, qthreshold=qthreshold)
sLevels=c("0","0.001","0.005","0.01","0.1")
factor(output$Locus_s,levels=sLevels)
factor(output$OutlierFlag,levels=c("False","True"))
resulttable=fromOutFLANKOutputToTable(output,envCorrCutoff)
outlist = outlist + resulttable
writeLines(paste(as.character(i)," reps have finished.   "))
}
writeLines(paste(" "))
#Note:  round() was changed to signif() 3 times in the next few lines after running some of the trials.
writeLines(paste("False positive rate = ",as.character(signif(outlist[2,1]/(outlist[1,1]+outlist[2,1]),4))))
falsePositiveCount=outlist[2,1]
truePositiveCount=outlist[2,2]+outlist[2,3]+outlist[2,4]+outlist[2,5]
writeLines(paste("False discovery rate = ",as.character(signif(falsePositiveCount/(falsePositiveCount+truePositiveCount),4))))
writeLines(paste("Power = ",as.character(signif(sum(outlist[2,2:5])/sum(outlist[1:2,2:5]),4))))
writeLines(paste(" "))
outlist
}
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12,RightTrimFactor=0.05)
multirunsMetalist=function(metalist, NumNeut, NumSel, NumPops, Use18=FALSE, NumSampledIndsPerPop=20, NoCorr=TRUE,envCorrCutoff=0, qthreshold=0.05, numreps, RightTrimFraction=0.05){
#Setting up the output array - -to count positive and negative resutls for each s value.
outlist=array(rep(0,10))
dim(outlist)=c(2,5)
colnames(outlist)=c("0","0.001","0.005","0.01","0.1")
rownames(outlist)=c("False","True")
for(i in 1:numreps) {
data=metalistHarvesterMike(metalist, NumNeut, NumSel, NumPops, Use18, NumSampledIndsPerPop, NoCorr=T)
output=OutFLANK(data, LeftTrimFraction=0.05, RightTrimFraction, Hmin=0.1, 20, qthreshold=qthreshold)
sLevels=c("0","0.001","0.005","0.01","0.1")
factor(output$Locus_s,levels=sLevels)
factor(output$OutlierFlag,levels=c("False","True"))
resulttable=fromOutFLANKOutputToTable(output,envCorrCutoff)
outlist = outlist + resulttable
writeLines(paste(as.character(i)," reps have finished.   "))
}
writeLines(paste(" "))
#Note:  round() was changed to signif() 3 times in the next few lines after running some of the trials.
writeLines(paste("False positive rate = ",as.character(signif(outlist[2,1]/(outlist[1,1]+outlist[2,1]),4))))
falsePositiveCount=outlist[2,1]
truePositiveCount=outlist[2,2]+outlist[2,3]+outlist[2,4]+outlist[2,5]
writeLines(paste("False discovery rate = ",as.character(signif(falsePositiveCount/(falsePositiveCount+truePositiveCount),4))))
writeLines(paste("Power = ",as.character(signif(sum(outlist[2,2:5])/sum(outlist[1:2,2:5]),4))))
writeLines(paste(" "))
outlist
}
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12,RightTrimFactor=0.05)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12,RightTrimFraction=0.05)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12,RightTrimFactor=0.1)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12,RightTrimFactor=0.01)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12,RightTrimFraction=0.1)
multirunsMetalist(df21R, NumNeut = 9900, NumSel = 100, NumPops = 20, NumSampledIndsPerPop = 20, envCorrCutoff = 0.4,numreps = 12,RightTrimFraction=0.01)
blackbird <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter12/chap12e2BlackbirdTestosterone.csv"))
blackbird
data(gtrunchier)
library(hierfstat)
install.packages("hierfstat")
library(hierfstat)
data(gtrunchier)
View(gtrunchier)
library(devtools)
library(roxygen2)
document("~/Desktop/OutFLANK")
install_github("whitlock/OutFLANK")
library(OutFLANK)
?OutFLANK
library(devtools)
library(roxygen2)
document("~/Desktop/OutFLANK")
